// Package vault provides integration with Vault/OpenBao PKI secrets engine.
// It enables seamless interaction between GoPKI's type-safe cryptographic operations
// and centralized PKI management via Vault/OpenBao.
package vault

import (
	"crypto/x509"
	"fmt"
	"time"
)

// CertificateResponse represents a certificate response from Vault.
// This contains the issued certificate along with the CA chain and metadata.
type CertificateResponse struct {
	Certificate *x509.Certificate   // The issued certificate
	CAChain     []*x509.Certificate // The CA certificate chain
	PrivateKey  []byte              // Private key (only if generated by Vault)
	SerialNumber string             // Certificate serial number
	Expiration  time.Time           // Certificate expiration time
}

// IssueOptions contains options for issuing a new certificate from Vault.
type IssueOptions struct {
	// CommonName is the certificate common name (CN)
	CommonName string

	// AltNames are DNS Subject Alternative Names
	AltNames []string

	// IPSANs are IP Subject Alternative Names
	IPSANs []string

	// URISANs are URI Subject Alternative Names
	URISANs []string

	// TTL is the certificate time-to-live (e.g., "720h", "30d")
	TTL string

	// Format specifies the certificate format ("pem", "der", "pem_bundle")
	Format string

	// PrivateKeyFormat specifies private key format ("", "pkcs8")
	// Only used when Vault generates the key
	PrivateKeyFormat string

	// ExcludeCNFromSANs excludes CN from Subject Alternative Names
	ExcludeCNFromSANs bool

	// NotAfter sets explicit expiration time (if supported)
	NotAfter time.Time
}

// SignOptions contains options for signing a CSR.
type SignOptions struct {
	// CommonName overrides the CSR common name (optional)
	CommonName string

	// AltNames are additional DNS SANs (merged with CSR SANs)
	AltNames []string

	// IPSANs are additional IP SANs (merged with CSR SANs)
	IPSANs []string

	// URISANs are additional URI SANs (merged with CSR SANs)
	URISANs []string

	// TTL is the certificate time-to-live
	TTL string

	// Format specifies the certificate format
	Format string

	// ExcludeCNFromSANs excludes CN from SANs
	ExcludeCNFromSANs bool
}

// IssuerInfo represents information about a Vault PKI issuer (CA).
type IssuerInfo struct {
	// IssuerID is the unique identifier
	IssuerID string

	// IssuerName is the human-readable name
	IssuerName string

	// KeyID is the associated key identifier
	KeyID string

	// Certificate is the issuer certificate
	Certificate *x509.Certificate

	// CAChain is the certificate authority chain
	CAChain []*x509.Certificate

	// ManualChain is a manually configured chain
	ManualChain []*x509.Certificate

	// LeafNotAfterBehavior controls leaf certificate expiration handling
	LeafNotAfterBehavior string

	// Usage specifies the issuer usage (read-only, issuing-certificates, etc.)
	Usage string
}

// KeyInfo represents information about a key in Vault.
type KeyInfo struct {
	// KeyID is the unique identifier
	KeyID string

	// KeyName is the human-readable name
	KeyName string

	// KeyType is the algorithm (rsa, ec, ed25519)
	KeyType string

	// KeyBits is the key size in bits
	KeyBits int
}

// Role represents a Vault PKI role configuration.
type Role struct {
	// Name is the role name
	Name string

	// TTL is the default time-to-live
	TTL string

	// MaxTTL is the maximum allowed TTL
	MaxTTL string

	// AllowLocalhost allows localhost in SANs
	AllowLocalhost bool

	// AllowedDomains are the permitted domains
	AllowedDomains []string

	// AllowBareDomains allows bare domain names
	AllowBareDomains bool

	// AllowSubdomains allows subdomain matching
	AllowSubdomains bool

	// AllowGlobDomains allows glob matching
	AllowGlobDomains bool

	// AllowAnyName allows any name (dangerous)
	AllowAnyName bool

	// EnforceHostnames validates hostnames
	EnforceHostnames bool

	// AllowIPSANs permits IP SANs
	AllowIPSANs bool

	// ServerFlag marks certificates for server auth
	ServerFlag bool

	// ClientFlag marks certificates for client auth
	ClientFlag bool

	// CodeSigningFlag marks certificates for code signing
	CodeSigningFlag bool

	// EmailProtectionFlag marks certificates for email protection
	EmailProtectionFlag bool

	// KeyType specifies the key algorithm (rsa, ec, ed25519, any)
	KeyType string

	// KeyBits specifies the key size
	KeyBits int

	// KeyUsage are the key usage extensions
	KeyUsage []string

	// ExtKeyUsage are the extended key usage extensions
	ExtKeyUsage []string
}

// RoleOptions contains options for creating/updating a role.
type RoleOptions struct {
	TTL                    string
	MaxTTL                 string
	AllowLocalhost         bool
	AllowedDomains         []string
	AllowedDomainsTemplate bool
	AllowBareDomains       bool
	AllowSubdomains        bool
	AllowGlobDomains       bool
	AllowAnyName           bool
	EnforceHostnames       bool
	AllowIPSANs            bool
	AllowedURISANs         []string
	ServerFlag             bool
	ClientFlag             bool
	CodeSigningFlag        bool
	EmailProtectionFlag    bool
	KeyType                string
	KeyBits                int
	KeyUsage               []string
	ExtKeyUsage            []string
	ExtKeyUsageOIDs        []string
	UseCSRCommonName       bool
	UseCSRSANs             bool
	RequireCN              bool
	PolicyIdentifiers      []string
	BasicConstraintsValidForNonCA bool
	NotBeforeDuration      string
}

// VaultError represents a structured error from Vault API.
type VaultError struct {
	// Operation is the operation that failed
	Operation string

	// StatusCode is the HTTP status code
	StatusCode int

	// Errors are the error messages from Vault
	Errors []string

	// Err is the underlying error
	Err error
}

// Error implements the error interface.
func (e *VaultError) Error() string {
	if len(e.Errors) > 0 {
		return fmt.Sprintf("vault: %s failed (status %d): %v",
			e.Operation, e.StatusCode, e.Errors[0])
	}
	if e.Err != nil {
		return fmt.Sprintf("vault: %s failed (status %d): %v",
			e.Operation, e.StatusCode, e.Err)
	}
	return fmt.Sprintf("vault: %s failed (status %d)",
		e.Operation, e.StatusCode)
}

// Unwrap returns the underlying error for error unwrapping.
func (e *VaultError) Unwrap() error {
	return e.Err
}

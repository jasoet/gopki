//go:build example

// Package main demonstrates how to import existing cryptographic keys into OpenBao.
//
// This example shows how to:
// - Generate keys locally with GoPKI
// - Import RSA keys into OpenBao
// - Import ECDSA keys into OpenBao
// - Import Ed25519 keys into OpenBao
// - Use imported keys for certificate issuance
//
// Key import is useful when:
// - Migrating existing keys to OpenBao
// - Using keys generated by external systems
// - Integrating with existing PKI infrastructure
//
// Prerequisites:
// - OpenBao server running
//
// Usage:
//
//	go run main.go
package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/jasoet/gopki/bao/pki"
	"github.com/jasoet/gopki/keypair/algo"
)

func main() {
	client, err := pki.NewClient(&pki.Config{
		Address: getEnv("BAO_ADDR", "http://127.0.0.1:8200"),
		Token:   getEnv("BAO_TOKEN", ""),
	})
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	// Example 1: Import RSA key
	fmt.Println("=== Example 1: Import RSA Key ===")
	fmt.Println("Generating RSA key pair locally...")

	rsaKeyPair, err := algo.GenerateRSAKeyPair(algo.KeySize2048)
	if err != nil {
		log.Fatalf("Failed to generate RSA key: %v", err)
	}
	fmt.Println("✓ RSA key pair generated locally")

	fmt.Println("Importing RSA key to OpenBao...")
	rsaKeyClient, err := client.ImportRSAKey(ctx, rsaKeyPair, &pki.ImportKeyOptions{
		KeyName: "imported-rsa-key",
	})
	if err != nil {
		log.Fatalf("Failed to import RSA key: %v", err)
	}

	fmt.Printf("✓ RSA key imported: %s\n", rsaKeyClient.KeyInfo().KeyID)
	fmt.Printf("  Key Name: %s\n", rsaKeyClient.KeyInfo().KeyName)
	fmt.Printf("  Key Type: %s\n", rsaKeyClient.KeyInfo().KeyType)

	// Example 2: Import ECDSA key
	fmt.Println("\n=== Example 2: Import ECDSA Key ===")
	fmt.Println("Generating ECDSA P-256 key pair locally...")

	ecdsaKeyPair, err := algo.GenerateECDSAKeyPair(algo.P256)
	if err != nil {
		log.Fatalf("Failed to generate ECDSA key: %v", err)
	}
	fmt.Println("✓ ECDSA key pair generated locally")

	fmt.Println("Importing ECDSA key to OpenBao...")
	ecdsaKeyClient, err := client.ImportECDSAKey(ctx, ecdsaKeyPair, &pki.ImportKeyOptions{
		KeyName: "imported-ecdsa-key",
	})
	if err != nil {
		log.Fatalf("Failed to import ECDSA key: %v", err)
	}

	fmt.Printf("✓ ECDSA key imported: %s\n", ecdsaKeyClient.KeyInfo().KeyID)
	fmt.Printf("  Curve: P-256\n")

	// Example 3: Import Ed25519 key
	fmt.Println("\n=== Example 3: Import Ed25519 Key ===")
	fmt.Println("Generating Ed25519 key pair locally...")

	ed25519KeyPair, err := algo.GenerateEd25519KeyPair()
	if err != nil {
		log.Fatalf("Failed to generate Ed25519 key: %v", err)
	}
	fmt.Println("✓ Ed25519 key pair generated locally")

	fmt.Println("Importing Ed25519 key to OpenBao...")
	ed25519KeyClient, err := client.ImportEd25519Key(ctx, ed25519KeyPair, &pki.ImportKeyOptions{
		KeyName: "imported-ed25519-key",
	})
	if err != nil {
		log.Fatalf("Failed to import Ed25519 key: %v", err)
	}

	fmt.Printf("✓ Ed25519 key imported: %s\n", ed25519KeyClient.KeyInfo().KeyID)

	// Example 4: Verify imported keys are available
	fmt.Println("\n=== Example 4: Verifying Imported Keys ===")
	fmt.Println("Imported keys are now available for use in OpenBao")
	fmt.Printf("  RSA Key ID: %s\n", rsaKeyClient.KeyInfo().KeyID)
	fmt.Printf("  ECDSA Key ID: %s\n", ecdsaKeyClient.KeyInfo().KeyID)
	fmt.Printf("  Ed25519 Key ID: %s\n", ed25519KeyClient.KeyInfo().KeyID)
	fmt.Println("✓ Keys can be used for certificate operations")

	// List all imported keys
	fmt.Println("\n=== Listing Imported Keys ===")
	keys, err := client.ListKeys(ctx)
	if err != nil {
		log.Fatalf("Failed to list keys: %v", err)
	}

	fmt.Printf("Found %d key(s) in OpenBao:\n", len(keys))
	for i, keyID := range keys {
		keyInfo, err := client.GetKey(ctx, keyID)
		if err != nil {
			continue
		}
		fmt.Printf("  %d. %s (Type: %s)\n", i+1, keyInfo.KeyName, keyInfo.KeyType)
	}

	// Cleanup
	fmt.Println("\n=== Cleanup ===")
	_ = rsaKeyClient.Delete(ctx)
	_ = ecdsaKeyClient.Delete(ctx)
	_ = ed25519KeyClient.Delete(ctx)
	fmt.Println("✓ Imported keys cleaned up")

	fmt.Println("✓ Key import examples completed!")

	fmt.Println("\nUse Cases for Key Import:")
	fmt.Println("  • Migrating existing PKI to OpenBao")
	fmt.Println("  • Centralizing key management")
	fmt.Println("  • Disaster recovery and key backup")
	fmt.Println("  • Integration with external key generation")

	fmt.Println("\nSecurity Considerations:")
	fmt.Println("  ⚠ Ensure secure transmission of private keys")
	fmt.Println("  ⚠ Use encrypted channels (HTTPS/TLS)")
	fmt.Println("  ⚠ Delete local key copies after import if not needed")
	fmt.Println("  ⚠ Audit key import operations")
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

version: '3'

vars:
  MODULE: github.com/jasoet/gopki
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path './vendor/*' -not -path './.git/*' | head -20

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  help:quality:
    desc: Show all code quality and analysis tasks
    cmds:
      - 'echo "üìã Code Quality & Analysis Tasks:"'
      - 'echo ""'
      - 'echo "Testing:"'
      - 'echo "  task test              - Run main tests (excludes examples and compatibility)"'
      - 'echo "  task test:all          - Run all tests including compatibility tests"'
      - 'echo "  task test:quick        - Run tests without race detection (faster)"'
      - 'echo ""'
      - 'echo "Compatibility Testing:"'
      - 'echo "  task test:compatibility        - Run OpenSSL compatibility tests (build tag: compatibility)"'
      - 'echo "  task test:compatibility:keypair - Run keypair compatibility tests only"'
      - 'echo "  task test:compatibility:cert    - Run certificate compatibility tests only"'
      - 'echo "  task test:compatibility:signing - Run signing compatibility tests only"'
      - 'echo ""'
      - 'echo "Code Analysis:"'
      - 'echo "  task lint              - Run go vet static analysis"'
      - 'echo "  task lint:full         - Run golangci-lint comprehensive check"'
      - 'echo "  task deadcode          - Find unused/dead code with deadcode tool"'
      - 'echo "  task unused            - Find unused code with golangci-lint"'
      - 'echo "  task unused:all        - Run all unused code detection tools"'
      - 'echo "  task analyze           - Run lint, vet, and deadcode"'
      - 'echo "  task analyze:full      - Run full analysis with all tools"'
      - 'echo ""'
      - 'echo "Formatting:"'
      - 'echo "  task format            - Format all Go code"'
      - 'echo "  task format:check      - Check if code is properly formatted"'
      - 'echo ""'
      - 'echo "üí° Tips:"'
      - 'echo "  ‚Ä¢ Use task test for comprehensive testing with coverage"'
      - 'echo "  ‚Ä¢ Use task deadcode to quickly find unused functions"'
      - 'echo "  ‚Ä¢ Use task analyze:full for complete code analysis"'
    silent: true

  # Setup and Dependencies
  setup:
    desc: Initial project setup - download dependencies and verify module
    cmds:
      - go mod download
      - go mod verify
      - go mod tidy
      - 'echo "‚úÖ Project setup complete"'
    silent: true

  # Build Tasks
  build:
    desc: Build the module and verify compilation
    sources:
      - '**/*.go'
      - go.mod
      - go.sum
    cmds:
      - go build ./...
      - 'echo "‚úÖ Build successful"'
    silent: true

  build:examples:
    desc: Build example binaries
    deps: [build]
    cmds:
      - mkdir -p bin/
      - go build -tags example -o bin/keypair-example ./examples/keypair/main.go
      - go build -tags example -o bin/certificates-example ./examples/certificates/main.go
      - go build -tags example -o bin/signing-example ./examples/signing/main.go
      - go build -tags example -o bin/encryption-example ./examples/encryption/main.go
      - go build -tags example -o bin/pkcs12-example ./examples/pkcs12/main.go
      - 'echo "‚úÖ Examples built in bin/ directory"'
    generates:
      - bin/keypair-example
      - bin/certificates-example
      - bin/signing-example
      - bin/encryption-example
      - bin/pkcs12-example
    silent: true

  # Testing Tasks
  test:
    desc: Run main tests (excludes examples and compatibility tests)
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - go test $(go list ./... | grep -v '/compatibility') -race -coverprofile=output/coverage.out
      - go tool cover -html=output/coverage.out -o output/coverage.html
      - go tool cover -func=output/coverage.out | tail -1
      - 'echo "‚úÖ Tests completed with coverage report: output/coverage.html"'
    generates:
      - output/coverage.out
      - output/coverage.html
    silent: true

  test:all:
    desc: Run all tests including compatibility tests
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - go test ./... -race -coverprofile=output/coverage.out
      - go tool cover -html=output/coverage.out -o output/coverage.html
      - go tool cover -func=output/coverage.out | tail -1
      - 'echo "‚úÖ All tests completed with coverage report: output/coverage.html"'
    generates:
      - output/coverage.out
      - output/coverage.html
    silent: true

  test:compatibility:
    desc: Run OpenSSL compatibility tests
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - |
        echo "üîó Running OpenSSL Compatibility Tests..."
        echo "   This tests interoperability between GoPKI and OpenSSL"
      - go test -mod=mod ./compatibility/... -v -tags=compatibility -timeout=10m -p=1
      - 'echo "‚úÖ OpenSSL compatibility tests completed"'
    silent: false

  test:compatibility:keypair:
    desc: Run keypair compatibility tests only
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - |
        echo "üîë Running Keypair Compatibility Tests..."
        echo "   Testing RSA, ECDSA, Ed25519 key compatibility with OpenSSL"
      - go test -mod=mod ./compatibility/keypair -v -tags=compatibility
      - 'echo "‚úÖ Keypair compatibility tests completed"'
    silent: false

  test:compatibility:cert:
    desc: Run certificate compatibility tests only
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - |
        echo "üìú Running Certificate Compatibility Tests..."
        echo "   Testing X.509 certificate compatibility with OpenSSL"
      - go test -mod=mod ./compatibility/cert -v -tags=compatibility
      - 'echo "‚úÖ Certificate compatibility tests completed"'
    silent: false

  test:compatibility:signing:
    desc: Run signing compatibility tests only
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - |
        echo "‚úçÔ∏è Running Signing Compatibility Tests..."
        echo "   Testing digital signature and PKCS#7/CMS compatibility with OpenSSL"
      - go test -mod=mod ./compatibility/signing -v -tags=compatibility
      - 'echo "‚úÖ Signing compatibility tests completed"'
    silent: false

  # Code Quality Tasks
  lint:
    desc: Run static analysis with go vet
    cmds:
      - go vet ./...
      - 'echo "‚úÖ Linting complete"'
    silent: true

  unused:
    desc: Check for unused code using golangci-lint
    cmds:
      - |
        if ! command -v golangci-lint &> /dev/null; then
          echo "‚ö†Ô∏è  golangci-lint not found. Installing..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        fi
      - golangci-lint run --enable=unused --disable-all ./...
    silent: false

  lint:install:
    desc: Install golangci-lint for advanced linting
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - 'echo "‚úÖ golangci-lint installed"'
    silent: true

  lint:full:
    desc: Run comprehensive linting with golangci-lint on core modules
    deps: [lint:check]
    cmds:
      - golangci-lint run ./keypair/... ./cert/... ./signing/...
      - 'echo "‚úÖ Full lint checks passed"'
    silent: true

  lint:check:
    desc: Check if golangci-lint is installed
    cmds:
      - |
        if ! command -v golangci-lint >/dev/null 2>&1; then
          echo "‚ùå golangci-lint not found. Install from https://golangci-lint.run/usage/install/"
          echo "   For macOS: brew install golangci-lint"
          echo "   For Linux: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin"
          exit 1
        fi
    silent: true

  lint:fix:
    desc: Auto-fix linting issues where possible
    deps: [lint:check]
    cmds:
      - golangci-lint run --fix ./keypair/... ./cert/... ./signing/... ./encryption/... ./pkcs12/...
      - 'echo "‚úÖ Auto-fixable lint issues resolved"'
    silent: true

  lint:security:
    desc: Run security-focused linting
    deps: [lint:check]
    cmds:
      - golangci-lint run --enable gosec,ineffassign,unconvert ./keypair/... ./cert/... ./signing/... ./encryption/... ./pkcs12/...
      - 'echo "‚úÖ Security lint checks passed"'
    silent: true

  lint:summary:
    desc: Show linting issues summary by type
    deps: [lint:check]
    cmds:
      - |
        echo "üìä Linting Issues Summary:"
        golangci-lint run ./keypair/... ./cert/... ./signing/... --out-format=tab 2>/dev/null | cut -f3 | sort | uniq -c | sort -nr | head -10
    silent: false

  format:
    desc: Format all Go code
    cmds:
      - go fmt ./...
      - 'echo "‚úÖ Code formatted"'
    silent: true

  format:check:
    desc: Check if code is properly formatted
    cmds:
      - |
        if [ -n "$(gofmt -l .)" ]; then
          echo "‚ùå The following files need formatting:"
          gofmt -l .
          exit 1
        else
          echo "‚úÖ All files are properly formatted"
        fi
    silent: true

  # Module Management
  mod:verify:
    desc: Verify module dependencies
    cmds:
      - go mod verify
      - 'echo "‚úÖ Module dependencies verified"'
    silent: true

  mod:tidy:
    desc: Clean up module dependencies
    cmds:
      - go mod tidy
      - 'echo "‚úÖ Module dependencies tidied"'
    silent: true

  mod:update:
    desc: Update all dependencies to latest versions
    cmds:
      - go get -u ./...
      - go mod tidy
      - 'echo "‚úÖ Dependencies updated"'
    silent: true

  mod:graph:
    desc: Show module dependency graph
    cmds:
      - go mod graph


  clean:
    desc: Clean build artifacts and generated files
    cmds:
      - rm -rf bin/ dist/ _output/ output/
      - rm -f *.test *.out *.html
      - rm -rf examples/keypair/output/
      - rm -rf examples/certificates/output/
      - rm -rf examples/signing/output/
      - rm -rf format_output/
      - rm -f *.pem *.key *.crt *.csr
      - 'echo "‚úÖ Cleaned build artifacts and generated files"'
    silent: true

  clean:cache:
    desc: Clean Go build and test cache
    cmds:
      - go clean -cache
      - go clean -testcache
      - 'echo "‚úÖ Go cache cleaned"'
    silent: true

  clean:all:
    desc: Clean everything including module cache
    deps: [clean, clean:cache]
    cmds:
      - go clean -modcache
      - 'echo "‚úÖ All caches and artifacts cleaned"'
    silent: true

  # Environment Tasks
  env:check:
    desc: Validate Go environment setup
    cmds:
      - go version
      - go env GOPATH
      - go env GOROOT
      - go env GOOS
      - go env GOARCH
      - 'echo "‚úÖ Go environment validated"'

  env:doctor:
    desc: Check project health and dependencies
    cmds:
      - 'echo "üîç Checking project health..."'
      - go version
      - go mod verify
      - go vet ./...
      - 'echo "‚úÖ Project health check complete"'
    silent: true

  # Benchmark Tasks
  bench:
    desc: Run all benchmarks
    cmds:
      - go test -bench=. ./...

  # Security Tasks
  security:check:
    desc: Check for known vulnerabilities in dependencies
    cmds:
      - go list -json -m all | nancy sleuth

  security:install:
    desc: Install security scanning tools
    cmds:
      - go install github.com/sonatype-nexus-community/nancy@latest
      - 'echo "‚úÖ Security tools installed"'
    silent: true

  # Git Tasks
  git:status:
    desc: Show git status and current branch
    cmds:
      - git status
      - git branch --show-current

  git:update:
    desc: Pull latest changes from repository
    cmds:
      - git pull

  git:sync:
    desc: Sync with remote repository
    cmds:
      - git fetch --all
      - git pull

  git:commit:
    desc: Add and commit changes with message (usage - task git:commit -- "your commit message")
    cmds:
      - git add .
      - git commit -m "{{.CLI_ARGS}}"

  # Documentation Tasks
  docs:install:
    desc: Install documentation tools
    cmds:
      - |
        if ! command -v godoc &> /dev/null; then
          echo "‚ö†Ô∏è  godoc not found. Installing..."
          go install golang.org/x/tools/cmd/godoc@latest
        fi
      - 'echo "‚úÖ Documentation tools installed"'
    silent: true

  docs:generate:
    desc: Generate documentation files for all packages
    deps: [docs:install]
    cmds:
      - mkdir -p output/docs/
      - |
        echo "# GoPKI Library Documentation" > output/docs/README.md
        echo "" >> output/docs/README.md
        echo "## Keypair Package" >> output/docs/README.md
        go doc -all ./keypair >> output/docs/README.md
        echo "" >> output/docs/README.md
        echo "## Certificate Package" >> output/docs/README.md
        go doc -all ./cert >> output/docs/README.md
        echo "" >> output/docs/README.md
        echo "## Signing Package" >> output/docs/README.md
        go doc -all ./signing >> output/docs/README.md
        echo "" >> output/docs/README.md
        echo "## Formats Package" >> output/docs/README.md
        go doc -all ./signing/formats >> output/docs/README.md
      - 'echo "‚úÖ Documentation generated in output/docs/README.md"'
      - 'echo "üí° For interactive docs, run: task docs:serve"'
    generates:
      - output/docs/README.md
    silent: true

  docs:serve:
    desc: Start godoc server for interactive documentation
    cmds:
      - 'echo "üåê Starting godoc server on http://localhost:6060"'
      - 'echo "üìñ Visit http://localhost:6060/pkg/{{.MODULE}}/ to view documentation"'
      - godoc -http=:6060

  docs:clean:
    desc: Clean generated documentation
    cmds:
      - rm -rf output/docs/
      - 'echo "‚úÖ Documentation cleaned"'
    silent: true

  # Example Management
  examples:run:
    desc: Run all examples
    deps: [build]
    cmds:
      - 'echo "üîê Running keypair examples..."'
      - go run -tags example ./examples/keypair/main.go
      - 'echo ""'
      - 'echo "üìú Running certificate examples..."'
      - go run -tags example ./examples/certificates/main.go
      - 'echo ""'
      - 'echo "‚úçÔ∏è Running document signing examples..."'
      - go run -tags example ./examples/signing/main.go
      - 'echo ""'
      - 'echo "üîí Running encryption examples..."'
      - go run -tags example ./examples/encryption/main.go
      - 'echo ""'
      - 'echo "üì¶ Running PKCS#12 examples..."'
      - go run -tags example ./examples/pkcs12/main.go
      - 'echo "‚úÖ All examples completed successfully!"'
    silent: true

  examples:keypair:
    desc: Run keypair examples only
    deps: [build]
    cmds:
      - go run -tags example ./examples/keypair/main.go
    silent: true

  examples:certificates:
    desc: Run certificate examples only
    deps: [build]
    cmds:
      - go run -tags example ./examples/certificates/main.go
    silent: true

  examples:signing:
    desc: Run signing examples only
    deps: [build]
    cmds:
      - go run -tags example ./examples/signing/main.go
    silent: true

  examples:encryption:
    desc: Run encryption examples only
    deps: [build]
    cmds:
      - go run -tags example ./examples/encryption/main.go
    silent: true

  examples:pkcs12:
    desc: Run PKCS#12 examples only
    deps: [build]
    cmds:
      - go run -tags example ./examples/pkcs12/main.go
    silent: true

  examples:clean:
    desc: Clean example output directories
    cmds:
      - rm -rf examples/keypair/output/
      - rm -rf examples/certificates/output/
      - rm -rf examples/signing/output/
      - rm -rf examples/encryption/output/
      - rm -rf examples/pkcs12/output/
      - 'echo "‚úÖ Example outputs cleaned"'
    silent: true

  # CI/CD Pipeline Tasks
  ci:
    desc: Run complete CI pipeline locally
    deps: [format:check, lint:security, test:coverage, build]
    cmds:
      - 'echo "‚úÖ CI pipeline completed successfully"'
    silent: true

  ci:quick:
    desc: Run quick CI checks (format, lint, basic tests)
    deps: [format:check, lint, test]
    cmds:
      - 'echo "‚úÖ Quick CI checks completed"'
    silent: true

  ci:full:
    desc: Run comprehensive CI pipeline with all checks
    deps: [format:check, lint:full, lint:security, test:coverage, build, examples:run]
    cmds:
      - 'echo "‚úÖ Full CI pipeline completed successfully"'
    silent: true

  release:check:
    desc: Check if project is ready for release
    deps: [format:check, lint:full, test:coverage, build]
    cmds:
      - |
        echo "üîç Release Readiness Check:"
        echo "  ‚úÖ Code formatting verified"
        echo "  ‚úÖ Linting checks passed"
        echo "  ‚úÖ Test coverage analyzed"
        echo "  ‚úÖ Build successful"
        echo ""
        echo "üì¶ Project appears ready for release!"
    silent: false

  pre-commit:
    desc: Run pre-commit checks (format, quick lint, basic tests)
    deps: [format, lint, test:quick]
    cmds:
      - 'echo "‚úÖ Pre-commit checks completed"'
    silent: true

version: '3'

vars:
  MODULE: github.com/jasoet/gopki

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  # Setup and Dependencies
  setup:
    desc: Initial project setup and install development tools
    cmds:
      - go mod download
      - go mod verify
      - go mod tidy
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - 'echo "‚úÖ Project setup complete"'
    silent: true

  # Build Tasks
  build:
    desc: Build the module
    cmds:
      - go build ./...
      - 'echo "‚úÖ Build successful"'
    silent: true

  build:examples:
    desc: Build example binaries
    cmds:
      - mkdir -p bin/
      - go build -tags example -o bin/keypair-example ./examples/keypair/main.go
      - go build -tags example -o bin/certificates-example ./examples/certificates/main.go
      - go build -tags example -o bin/signing-example ./examples/signing/main.go
      - go build -tags example -o bin/encryption-example ./examples/encryption/main.go
      - go build -tags example -o bin/pkcs12-example ./examples/pkcs12/main.go
      - 'echo "‚úÖ Examples built in bin/ directory"'
    silent: true

  # Testing Tasks
  test:
    desc: Run main tests with verbose output and coverage (excludes compatibility)
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - go test  ./... -race -v -coverprofile=output/coverage.out
      - go tool cover -html=output/coverage.out -o output/coverage.html
      - go tool cover -func=output/coverage.out | tail -1
      - 'echo "‚úÖ Tests completed with coverage: output/coverage.html"'
    silent: false

  test:integration:
    desc: Run main tests with verbose output and coverage (excludes compatibility)
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - go test ./... -tags integration -race -v -coverprofile=output/coverage.out
      - go tool cover -html=output/coverage.out -o output/coverage.html
      - go tool cover -func=output/coverage.out | tail -1
      - 'echo "‚úÖ Tests completed with coverage: output/coverage.html"'
    silent: false

  test:compatibility:
    desc: Run OpenSSL compatibility tests
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - |
        echo "üîó Running OpenSSL Compatibility Tests..."
        echo "   This tests interoperability between GoPKI and OpenSSL"
      - go test ./compatibility/... -v -tags=compatibility -timeout=10m -p=1
      - 'echo "‚úÖ OpenSSL compatibility tests completed"'
    silent: false

  test:compatibility:bao:
    desc: Run GoPKI ‚Üî OpenBao compatibility tests
    env:
      CGO_ENABLED: 1
    cmds:
      - mkdir -p output/
      - |
        echo "üîó Running GoPKI ‚Üî OpenBao Compatibility Tests..."
        echo "   This tests interoperability between GoPKI modules and OpenBao"
        echo "   Requires Docker for OpenBao testcontainers"
      - go test ./compatibility/bao -v -tags=compatibility -race -timeout=10m
      - 'echo "‚úÖ GoPKI ‚Üî OpenBao compatibility tests completed"'
    silent: false

  # Code Quality
  format:
    desc: Format all Go code and organize imports
    cmds:
      - goimports -local github.com/jasoet/gopki -w .
      - go fmt ./...
      - 'echo "‚úÖ Code formatted and imports organized"'
    silent: true

  lint:
    desc: Run comprehensive linting (go vet + golangci-lint)
    cmds:
      - go vet ./...
      - golangci-lint run ./...
      - 'echo "‚úÖ Linting complete"'
    silent: true

  # Examples
  examples:run:
    desc: Run all examples
    cmds:
      - 'echo "üîê Running keypair examples..."'
      - go run -tags example ./examples/keypair/main.go
      - 'echo ""'
      - 'echo "üìú Running certificate examples..."'
      - go run -tags example ./examples/certificates/main.go
      - 'echo ""'
      - 'echo "‚úçÔ∏è Running signing examples..."'
      - go run -tags example ./examples/signing/main.go
      - 'echo ""'
      - 'echo "üîí Running encryption examples..."'
      - go run -tags example ./examples/encryption/main.go
      - 'echo ""'
      - 'echo "üì¶ Running PKCS#12 examples..."'
      - go run -tags example ./examples/pkcs12/main.go
      - 'echo "‚úÖ All examples completed!"'
    silent: true

  # Clean
  clean:
    desc: Clean build artifacts and caches
    cmds:
      - rm -rf bin/ output/
      - rm -rf examples/*/output/
      - rm -f *.test *.out *.html *.pem *.key *.crt *.csr
      - go clean -cache -testcache
      - 'echo "‚úÖ Cleaned build artifacts and caches"'
    silent: true

  # CI/CD
  ci:
    desc: Run CI pipeline (format, lint, test, build, examples)
    deps: [ format, lint, test, build, examples:run ]
    cmds:
      - 'echo "‚úÖ CI pipeline completed"'
    silent: true
